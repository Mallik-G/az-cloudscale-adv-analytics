#!/bin/bash

# Select Azure subscription
az account list --output table

echo "\n\r"

read -p "Subscription Name for lab>>" subName

if [ ! -z "$subName" ]; then
    echo "You select " $subName " for the lab."
    az account set --subscription "$subName" --verbose
else
    echo "Please run the script again!! EXIT"
    exit
fi

chkName=$(az account list --output tsv --query "[?isDefault].name")

if [ "$subName" = "$chkName" ]; then
    echo "Subscripion Name has confirmed"
else 
    echo "Please try again with correct subscription name"
    exit
fi

# Set a parameter that will be used for password 
sqlpwd=1q2w3e4r5t^Y
echo ""
echo "Type Passowrd for the lab" $sqlpwd

echo ""
az account list-locations --output table --query []['name','displayName']
echo "Type location for the lab"
read -p "Location >>" loc

# set azure region
if [ ! -z "$loc" ]; then
    echo "You set location" $loc " for the lab."
else
    echo "Default location is West US 2"
    loc=westus2
fi

# 3. get subscruption ID
# if you have exsiting one please use the one
num=$(shuf -i0-1000 -n1)
rgName=g-rsg-1n-exploratrium01-datasci-training-01#azlab-$num-rg #Save it as ps1
# set blob name that should be unique 
blobName=azlabblob$num # It will be saved it in parameter file
# set container name that will be created in Blob
containerName=sampledata
# set SQL Server (Instance) name
sqlsvrName=azlabsql$num # It will be saved it in parameter file
# Azure Key Vault Name
akvName=akv$num
# DO NOT CHANGE!!!
sqldbName=wwimdb
# DO NOT CHANGE!!!
sqladm=sqladmin

# Create the Resource Group
# if you have exsiting one you can skip this part
echo "1. Create Resource Group " $rgName
az group create --name $rgName --location $loc 

# Storage Account
# Create the Storage Account
echo "2. Create Blob " $blobName
az storage account create --name $blobName --resource-group $rgName --sku Standard_LRS --location $loc --kind StorageV2 

# Get blob connection string 
blobConn=$(az storage account show-connection-string --name $blobName --resource-group $rgName --output tsv)
blobkey1=$(az storage account keys list -n $blobName -g $rgName --output tsv --query [0].value)

# Create a container
echo "3. Create container in the blob" $containerName 
az storage container create --name $containerName --connection-string $blobConn

# Create a DB and restore Database from backup
# Download Sample DB (Backup)
echo "4. Download a sample DB"
file_to_upload="./wwimdb.bacpac"
objName=wwimdb.bacpac
# wget is tool you can download files
# Cloud Shell has wget.exe on both Bash or Powershell 
wget -O $file_to_upload https://github.com/xlegend1024/az-cloudscale-adv-analytics/raw/master/sampledb/wwimdb.bacpac 

# Uploading a SQLDB Backup file
echo "5. Upload sample db to blob"
az storage blob upload --container-name $containerName --file $file_to_upload --name $objName --connection-string $blobConn
# Confirm file is uploaded 
az storage blob list --container-name $containerName --connection-string $blobConn --output table

# Create SQL Server and restore database from backup 
# Create a SQL Server
echo "6. Create a SQL Server " $sqlsvrName
az sql server create --admin-user $sqladm --admin-password $sqlpwd --location $loc --name $sqlsvrName --resource-group $rgName 

# Update SQL Server Firewall rule
# Opeing all firewall is NOT recommend for production or in any environment
# Opening all IP address is for this demo and lab only
echo "7. Update SQL Server Firewall"
az sql server firewall-rule create -n openall --start-ip-address 1.1.1.1 --end-ip-addres 255.255.255.255 -g $rgName -s $sqlsvrName
az sql server firewall-rule create -g $rgName -s $sqlsvrName -n allowazure --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0

# Create a SQL DB
echo "8. Create a SQL DB " $sqldbName
az sql db create --name $sqldbName --resource-group $rgName --server $sqlsvrName --service-objective S3 
# Get uri where sql backup is
bloburi="https://$blobName.blob.core.windows.net/$containerName/$objName"
time=2020-01-01T00:00:00Z
sas=$(az storage blob generate-sas --account-name $blobName --container-name $containerName --name $objName --permissions r --expiry $time --output tsv)

# Restore SQL DB 
echo "9. Restore DB"
az sql db import -s $sqlsvrName -n $sqldbName -g $rgName -p $sqlpwd -u $sqladm --storage-key $sas --storage-key-type SharedAccessKey --storage-uri $bloburi

#sqldbconn='Server=tcp:'$sqlsvrName'.database.windows.net,1433;Initial Catalog='$sqldbName';Persist Security Info=False;User ID=sqladmin@;Password='$sqlpwd';Encrypt=true;Connection Timeout=30;'
sqldbconn=$(az sql db show-connection-string -s $sqlsvrName -n $sqldbName -c ado.net)
sqldbconn=${_sqldbconn/<username>/$sqladm}
sqldbconn=${_sqldbconn/<password>/$sqlpwd}  

# Create keyvault
## Steps
echo "Create Azure Key Vault"
az keyvault create --name $akvName --resource-group $rgName --location $loc

az keyvault secret set --vault-name $akvName --name 'dev-sqldbconn' --value $sqldbconn
az keyvault secret set --vault-name $akvName --name 'dev-blobconn' --value $blobConn

echo $(date) >> ./azlab.txt
echo "Resource Group:   " $rgName >> ./azlab.txt
echo "Location:         " $loc >> ./azlab.txt
echo "Blob:             " $blobName >> ./azlab.txt
echo "Blob Key:         " $blobkey1 >> ./azlab.txt
echo "SQL Server:       " $sqlsvrName >> ./azlab.txt
echo "SQL Database:     " $sqladm >> ./azlab.txt
echo "SQL DB Password:  " $sqlpwd >> ./azlab.txt
echo "SQL DB Connection:" $sqldbconn >> ./azlab.txt
echo "" >> ./azlab.txt

echo "Your lab environment information is saved as azlab.txt"
